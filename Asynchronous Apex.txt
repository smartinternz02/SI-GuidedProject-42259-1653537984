                                      ASYNCHRONOUS APEX

Use Future Method:

AccountProcessor.apxc

public class AccountProcessor {
	
    @future
    public static void countContacts(List<Id> accountIds){

List<Account> accList = [Select Id, Number_Of_Contacts__c, (Select Id from Contacts) from Account where Id in :accountIds];

        for(Account acc : accList){

            acc.Number_Of_Contacts__c = acc.Contacts.size();
         }   

        update accList;
    }
}

AccountProcessorTest.apxc

@isTest
public class AccountProcessorTest {
    public static testmethod void testAccountProcessor(){

        Account a= new Account();
        a.Name='Test Account';
        insert a;

        Contact con= new Contact();
        con.FirstName='Vyshnavi';
        con.LastName = 'Priya';
        con.AccountId=a.Id;

        insert con;

        List<Id> accListId =new List<Id>();
        accListId.add(a.Id);

        Test.startTest();
        AccountProcessor.countContacts(accListId);
        Test.stopTest();

        Account acc=[Select Number_Of_Contacts__c from Account where Id=: a.Id];
        System.assertEquals(Integer.valueOf(acc.Number_Of_Contacts__c),1);
    }

}

Use Batch Apex:

LeadProcessor.apxc

global class LeadProcessor implements Database.Batchable<sObject>{
    global Integer count=0;

    global Database.QueryLocator start(Database.BatchableContext bc){
        return Database.getQueryLocator('Select ID,LeadSource FROM Lead');
    }

    global void execute (Database.BatchableContext bc, List<lead> L_list){
        List<lead> L_list_new = new List<lead>();

        for(lead L:L_list){
            L.leadsource='Dreamforce';
            L_list_new.add(L);
            count+=1;
        }
        update L_list_new;
    }

    global void finish(Database.BatchableContext bc){
        system.debug('count='+count);
    }

}

LeadProcessorTest.apxc

@isTest
public class LeadProcessorTest {

    @isTest
    public static void testit(){
        List<lead> L_list=new List<lead>();

        for(Integer i=0;i<200;i++){
            Lead L= new lead();
            L.LastName='name'+i;
            L.Company='Company';
            L.Status='Random Status';
            L_list.add(L);
        }
        insert L_list;

        Test.startTest();
        LeadProcessor lp= new LeadProcessor();
        Id batchId= Database.executeBatch(lp);
        Test.stopTest();
    }

}


Control Processes with Queueable Apex:

AddPrimaryContact.apxc

public class AddPrimaryContact implements Queueable {

    private Contact con;
    private String state;

    public AddPrimaryContact(Contact con,String state){
        this.con=con;
        this.state=state;
    }

    public void execute(QueueableContext context){
        List<Account> accounts=[Select Id,Name,(Select FirstName,LastName,Id from contacts)
                               from Account where BillingState=: state Limit 200];
        List<Contact> primaryContacts=new List<Contact>();

        for(Account acc:accounts){
            contact c= con.clone();
            c.AccountId=acc.Id;
            primaryContacts.add(c);
        }
        if(primaryContacts.size()>0){
            insert primaryContacts;
        }
    }


}


AddPrimaryContactTest.apxc

@isTest
public class AddPrimaryContactTest {

    static testmethod void testQueueable(){
        List<Account> testAccounts=new List<Account>();
        for(Integer i=0;i<50;i++){
            testAccounts.add(new Account(Name='Account'+i,BillingState='CA'));
        }
        for(Integer j=0;j<50;j++){
            testAccounts.add(new Account(Name='Account'+j,BillingState='NY'));
        }
        insert testAccounts;

        Contact testContact =new Contact(FirstName='Vyshnavi',LastName='Priya');
        insert testContact;

        AddPrimaryContact addit = new addPrimaryContact(testContact,'CA');

        Test.startTest();
        system.enqueueJob(addit);
        Test.stopTest();
        System.assertEquals(50,[Select count() from Contact where accountId in (Select Id from Account where BillingState='CA')]);
    }


}


Schedule Jobs Using the Apex Scheduler:

DailyLeadProcessor.apxc

public class DailyLeadProcessor implements schedulable{

    public void execute(schedulableContext sc) {
        List<lead> l_lst_new = new List<lead>();
        List<lead> l_lst = new List<lead>([select id, leadsource from lead where leadsource = null]);
        for(lead l : l_lst) {
            l.leadsource = 'Dreamforce';
            l_lst_new.add(l);
        }
        update l_lst_new;
    }

}



DailyLeadProcessorTest.apxc

@isTest
public class DailyLeadProcessorTest {

    @isTest
    public static void testing() {

        List<lead> l_lst = new List<lead>();
        for(Integer i=0;i<200;i++) {
            lead l = new lead();
            l.lastname = 'lastname'+i;
            l.Company = 'company'+i;
            l_lst.add(l);
        }
        insert l_lst;

        Test.startTest();
        DailyLeadProcessor dlp = new DailyLeadProcessor ();
        String jobId = System.Schedule('dailyleadprocessing','0 0 0 1 12 ? *',dlp);
        Test.stopTest();

        List<lead> l_lst_chk = new List<lead>([select id,leadsource from lead where leadsource != 'Dreamforce']);
        System.assertequals(0,l_lst_chk.size());
    }

}
